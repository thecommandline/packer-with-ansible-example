- name: Include operating system specific variables for {{ ansible_os_family }}. 
  include_vars: "{{ ansible_os_family }}.yml"

- name: Create {{ nginx_group }} group.
  group: name={{ nginx_group }} state=present 

- name: Create {{ nginx_user }} user.
  user: "name={{ nginx_user }} state=present shell=/usr/sbin/nologin home=/var/www groups={{ nginx_group }}"

- name: Create {{ nginx_sites_available }} directory.
  file: "dest={{ nginx_sites_available }} state=directory owner={{ nginx_user }} group={{ nginx_group }} mode=0755"

- name: Create {{ nginx_sites_enabled }} directory.
  file: "dest={{ nginx_sites_enabled }} state=directory owner={{ nginx_user }} group={{ nginx_group }} mode=0755"

- name: Include nginx installation configuration for {{ ansible_os_family }}. 
  include: "install_{{ ansible_os_family }}.yml"

- name: Generate nginx.conf.
  template: "src=nginx.conf.j2 dest=/etc/nginx/nginx.conf" 
  notify: reload-nginx 

- name: Remove default.conf from conf.d.
  file: "path=/etc/nginx/conf.d/default.conf state=absent"

- name: Create any upstream servers if configured.  
  template: "src=upstream.conf.j2 dest=/etc/nginx/conf.d/{{ item['server']['file_name'] }}"
  with_items: "{{ nginx_upstream_servers }}"
  when: 
    - nginx_upstream_servers is defined
    - item['server'] != None

- name: Create the configurations for sites
  template: "src=site.conf.j2 dest=/etc/nginx/sites-available/{{ item['server']['file_name'] }}"
  with_items: "{{ nginx_sites }}"
  when: 
    - nginx_sites is defined
    - item['server'] != None

- name: Create links from sites-available to sites-enabled.
  file: "path=/etc/nginx/sites-enabled/{{ item['server']['file_name'] }} src=/etc/nginx/sites-available/{{ item['server']['file_name'] }} state=link"
  with_items: "{{ nginx_sites }}"
  when:
    - nginx_sites is defined  
    - item['server'] != None
  notify: 
   - reload-nginx
